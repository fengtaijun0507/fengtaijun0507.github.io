---
layout: post

title:  "JS 正则表达式"

date:   2016-03-01

---

### 一.正则表达式的定义

1)通过RegExp直接量方式创建

	var re=/\d*?/i

一个正则表达式会在编译器读到他的时候转化成一个RegExp对象

1)通过RegExp对象创建

	var re=new RegExp("\\d","i");

注意与直接量的书写区别：是字符串形式，并且需要转义字符"\\d"

尽量用第一种方式定义，方便

### 二.正则表达式的语法

#### 直接量字符
#### 字符类(是与非成对出现)
     * [ ] [^]:中括号是所选内容的范围
     * .：除去换行符和其他Unicode行终止符之外的任意字符
     * \w:任何ASCII字符组成的单词，等价[a-zA-Z0-9]
     * \W:任何ASCII字符组成的单词，等价[^a-zA-Z0-9]
     * \s:任何Unicode空白符
     * \S:任何非Unicode空白符的字符
     * \d:[0-9]
     * \D:[^0-9]
     * [\b]:退格直接量，注意\b本身是有boundary的内涵，规定匹配的位置
#### 重复
     * {n,m}
     * {n,}
     * {n}
     * ?:>0
     * +:>1
     * *:>0
#### 量词的非贪婪重复  数量词+？

     *+？，尽可能少的匹配
注意正则表达式的匹配模式：他总是寻找字符串中第一个可匹配的字符串的位置>非贪婪模式

例如：/a+?b/匹配字符串"aaab"结果是"aaab":

	var re = /a+?b/i;
	var str = "aaaab";
	var aResult = str.match(re);
	console.log(aResult);
	console.log(aResult[0]);
	console.log(aResult.length);
	: ["aaaab", index: 0, input: "aaaab"]
	: aaaab
	: 1

#### 选择，分组，引用

 1. "|":如果可以理解为“或”的关系，那么"|"左右两边的字符串匹配的(子)表达式的基本单位，/aaaa|bbbb/
 2. （）的作用：
      * 第一：定义子模式，分组，子模式可以嵌套
      * 第二：定义子模式形成独立单元就可以与数量词(*,+,?)以及|配合
      * 第三：引用(\1)引用前面的第一个子模式
      
注意：()分组与(?:)分组的区别：
    
    ()分组：
	var re = /([Jj]ava([Ss]cript)?)\sis\s(fun\w*)/;
	var str = "javascript is fun !";
	var aResult = str.match(re);
	console.log(aResult);
	console.log(aResult[0]);
	console.log(aResult.length);
	:["javascript is fun", "javascript", "script", "fun", index: 0, input: "javascript is fun !"]
	:javascript is fun
	:4

    (?:)分组：
	var re = /([Jj]ava(?:[Ss]cript)?)\sis\s(fun\w*)/;
	var str = "javascript is fun !";
	var aResult = str.match(re);
	console.log(aResult);
	console.log(aResult[0]);
	console.log(aResult.length);
	: ["javascript is fun", "javascript", "fun", index: 0, input: "javascript is fun !"]
	: javascript is fun
	: 3
    
    (?:)分组不编码

#### 指定匹配位置 ^,$,\b,\B,(?=p),(?!p)

#### 修饰符i,g,m

注意：g：执行一个全局匹配，即找到所有的匹配，而不是找到第一个就停止
ｍ：多行匹配，对于＾，＄的意义在单行和多行的意义不一样，默认情况下，表达式 "^" 和 "$" 只匹配字符串的开始和结尾位置，再多行是匹配行首和行尾

    var re = /^b./gm;
    var str = "bd76\r\nhs b6\r\nb76 dsf\r\ndfsdf ";
    var aResult = str.match(re);
    console.log(aResult);
    console.log(aResult[0]);
    : ["bd", "b7"]
    : bd
### 三.js字符串本身的方法，String用于模式匹配的方法

* search(),查找
 
    参数是可以是正则表达式，也可以是字符串，

    返回值是-1(没有匹配字符串)，或者匹配的字符串，

    不支持全局搜索，也就是说搜索结果只是第一个匹配的字符串

* replace(),替换

    参数：replace(re/string,string)
    
    注意：replace(..,fucntion(word){})
         回调函数的参数的个数与组相关，比如有一个子模式的话，就有两个参数，$1是搜索的匹配的第一个字符串，$2是第二个，依次类推

    注意：如果添加g，replace的回调函数会自动循环调用，没有就只运行第一次匹配

* match(re/string),

     注意返回的数组，第一个匹配的符串，后面是分组的字符串
*split()


### 四.RegExp对象

  * .属性：与g,i,m相对应的属性global，ignoreCase，multiline,还有lastIndex

  lastIndex：
           
    1. 可读写的属性
    2. 针对正则设置为g时，字符串下一次检索的位置
  
  * .方法：re.exec(str),re.test(str)

  re.exec(str)：

    1.与match相似
    2.返回一个数组
    3.每次只返回一个结果
列如：

    var re = /java/g;
    var str = "javascript is more fun than java!";
    var result;
    while ((result = re.exec(str)) != null) {
        console.log(result);
        console.log(re.lastIndex);
    }
    : ["java", index: 0, input: "javascript is more fun than java!"]
    : 4
    : ["java", index: 28, input: "javascript is more fun than java!"]
    : 32 
     
 注意：当用re的方法匹配多个字符串的时候，就需要手动修改lastIndex，否则第二个字符串无法从头开始匹配
  
### 五.常用的正则表达式，

	
	  html标签:/<([a-z]+)([^>]*)>([\s\S]*)<\/\1>|<([a-z]+)([^>]*)(\/?)>/mg;
	
	  url： /^((http|https|ftp):\/\/)?((\w(\:\w)?@)?([0-9a-z_-]+\.)*?([a-z0-9-]+\.[a-z]{2,6}(\.[a-z]{2,})|([0-9]{1,3}.){3}[0-9]{1,3})?(\:([0-9]{2,6}))?)((\/[^?#<>\/\\*":]*)+(\?[^#]*)?(#.*)?)?$/i
	  例子：
      var re = /^((http|https|ftp):\/\/)?((\w(\:\w)?@)?([0-9a-z_-]+\.)*?([a-z0-9-]+\.[a-z]{2,6}(\.[a-z]{2,})|([0-9]{1,3}.){3}[0-9]{1,3})?(\:([0-9]{2,6}))?)((\/[^?#<>\/\\*":]*)+(\?[^#]*)?(#.*)?)?$/i;
      var str = "https://199.194.52.184:8080/webhp?hl=zh-CN&gws_rd=cr&ei=PNrVVrDnGo-1uQTouIzAAQ#newwindow=1&hl=zh-CN&q=js+url%E6%AD%A3%E5%88%99"
      result = str.match(re);
      console.log(result);
      0: "https://199.194.52.184:8080/webhp?hl=zh-CN&gws_rd=cr&ei=PNrVVrDnGo-1uQTouIzAAQ#newwindow=1&hl=zh-CN&q=js+url%E6%AD%A3%E5%88%99"
      1: "https://"
      2: "https"
      3: "199.194.52.184:8080"
      4: undefined
      5: undefined
      6: undefined
      7: "199.194.52.184"
      8: undefined
      9: "52."
     10: ":8080"
     11: "8080"
     12: "/webhp?hl=zh-CN&gws_rd=cr&ei=PNrVVrDnGo-1uQTouIzAAQ#newwindow=1&hl=zh-CN&q=js+url%E6%AD%A3%E5%88%99"
     13: "/webhp"
     14: "?hl=zh-CN&gws_rd=cr&ei=PNrVVrDnGo-1uQTouIzAAQ"
     15: "#newwindow=1&hl=zh-CN&q=js+url%E6%AD%A3%E5%88%99"
     index: 0
     input: "https://199.194.52.184:8080/webhp?hl=zh-CN&gws_rd=cr&ei=PNrVVrDnGo-1uQTouIzAAQ#newwindow=1&hl=zh-CN&q=js+url%E6%AD%A3%E5%88%99"
     length: 16
    
     fulUrl:result[0]
     protocol:result[1]
     ip/host:result[6]
     port:result[10]
     path:result[12]
     paramsArray:result[13]
     anchor:result[14]
     
	 email：/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/
	
	 国内电话号码：/\d{3}-\d{8}|\d{4}-\d{7}/
	
	 手机号码：/^1\d{10}$/
              /^(13[0-9]|15[0|3|6|7|8|9]|18[8|9])\d{8}$/
              /^1[34578]\d{9}$/
	  
	 邮政：/^[1-9]\d{5}$/
	
	 只能输入由数字和26个英文字母组成的字符串："^[A-Za-z0-9]+$"
	
	 只能输入由数字、26个英文字母或者下划线组成的字符串："^\w+$"
	
	 验证密码：/^[a-zA-Z]\w{5,17}$/，字母开头，字母，数字，下划线，6-18位
	
	 可以输入整数或者小数：/^[0-9]+\.{0,1}[0-9]{0,6}$/
	
	 身份证：/^\d{15}|\d{18}$/

### 六.有用的正则表达式片段：
    
    1.[\s\S]:所有的Unicode字符，包括汉字
    	
	2.汉字限制：[\u4e00-\u9fa5]
	  
	3.双字节：[^\x00-\xff]
  
### 七.参考

#### [1].[js常用的正则表达式](http://www.cnblogs.com/zfc2201/archive/2012/12/18/2824107.html)

